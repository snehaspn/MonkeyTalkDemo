/***** DO NOT EDIT THIS FILE *****/
// MonkeyTalkAPI.js generated by MonkeyTalk at 2013-04-22 20:23:47 MDT

/*  MonkeyTalk - a cross-platform functional testing tool
    Copyright (C) 2012 Gorilla Logic, Inc.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>. */

importClass(com.gorillalogic.monkeytalk.Command);
importClass(com.gorillalogic.monkeytalk.sender.CommandSender);
importClass(com.gorillalogic.monkeytalk.processor.PlaybackStatus);
importClass(com.gorillalogic.monkeytalk.processor.Scope);

var MT = {};

MT.isNumber = function(v) {
	return !isNaN(v);
};

MT.isString = function(v) {
	var clazz = Object.prototype.toString.call(v).slice(8, -1);
	return v !== undefined && v !== null && clazz === 'String';
};

MT.asString = function(v) {
	return "" + v;
};

MT.getModifiers = function(args) {
	var lastArg = args[args.length - 1];
	var modifiers = new java.util.HashMap();
	if (!MT.isNumber(lastArg) && !MT.isString(lastArg)) {
		for (prop in lastArg) {
			modifiers.put(prop, MT.asString(lastArg[prop]));
		}
	}
	return modifiers;
};

MT.getArgList = function(args) {
	var argList = new java.util.ArrayList();
	for ( var i = 0; i < args.length; i++) {
		if (MT.isNumber(args[i]) || MT.isString(args[i])) {
			argList.add(MT.asString(args[i]));
		}
	}
	return argList;
};

/**
 * The base class for all MonkeyTalk objects
 * 
 * @class
 */
MT.MTObject = function(app, monkeyId) {
	this.monkeyId = monkeyId;
	this.app = app;
	this.componentType = "MTObject";
};

/**
 * An application at the specified host and port.
 * 
 * @class
 * @extends MT.MTObject
 * @param host
 *            the remote hostname or ip address where the application is
 *            running. Defaults to localhost.
 * @param port
 *            the port it's listening on. Defaults to 16862 (Android playback).
 * @param scriptDir
 *            the local directory in which to look for scripts
 */
MT.Application = function(host, port, scriptDir) {
	var h = host || "localhost";
	var p = port ? port : 16862;
	var dir = scriptDir ? scriptDir : ".";
	this.host = h;
	this.port = p;
	this.scriptDir = dir;
};

/**
 * Called by generated wrapper api's
 * 
 * @ignore
 */
MT.Application.prototype.play = function(mtobject, action, args, mods) {
	var cmd = new Command(mtobject.componentType, mtobject.monkeyId, action, args, mods);
	ScopeObj.setCurrentCommand(cmd);
	
	var result = ProcessorObj.runScript(cmd, ScopeObj);

	if (result == null) {
		return result;
	} else if (result.getStatus() == PlaybackStatus.OK) {
		return "" + result.getMessage();
	} else {
		throw "" + result.getMessage();
	}
};

/**
 * A MonkeyTalk script. The monkeyID is the name of the script. If no extension
 * is specified, then the script runner will first search for a .js file, and if
 * none is found, the runner will search for an .mt file.
 * 
 * @param app
 * @param monkeyId
 * @returns {MT.Script}
 */
MT.Script = function(app, monkeyId) {
	MT.MTObject.call(this, app, monkeyId);
	this.componentType = "Script";
};

MT.Script.prototype = new MT.MTObject;

/**
 * Run the script with zero-or-more arguments
 * 
 * @returns the script results
 */
MT.Script.prototype.run = function() {
	var argArray = [].slice.apply(arguments);
	var mods = MT.getModifiers(argArray);

	if (mods.length > 0) {
		argArray.pop();
	}
	var argList = MT.getArgList(argArray);
	
	var cmd = new Command('Script', this.monkeyId, 'Run', argList, mods);
	ScopeObj.setCurrentCommand(cmd);

	var result = ProcessorObj.runScript(cmd, ScopeObj);

	if (result == null) {
		return result;
	} else if (result.getStatus() == PlaybackStatus.OK) {
		return "" + result.getMessage();
	} else {
		throw "" + result.getMessage();
	}
};

/**
 * Run the script with the supplied csv file
 * 
 * @returns the script results
 */
MT.Script.prototype.runWith = function() {
	var argArray = [].slice.apply(arguments);
	var mods = MT.getModifiers(argArray);

	if (mods.length > 0) {
		argArray.pop();
	}
	var argList = MT.getArgList(argArray);

	var cmd = new Command("Script", this.monkeyId, "RunWith", argList, mods);
	ScopeObj.setCurrentCommand(cmd);

	var result = ProcessorObj.runScript(cmd, ScopeObj);

	if (result == null) {
		return result;
	} else if (result.getStatus() == PlaybackStatus.OK) {
		return "" + result.getMessage();
	} else {
		throw "" + result.getMessage();
	}
};

MT.Application.prototype.script = function(monkeyId) {
	return new MT.Script(this, monkeyId);
};

/**
 * A custom component type.
 * 
 * @extends MT.Script
 * @param app
 * @param monkeyId
 *            the monkeyId of this custom type instance
 * @param componentType
 *            the component type's name
 * @returns {MT.CustomType}
 */
MT.CustomType = function(app, monkeyId, componentType) {
	MT.Script.call(this, app, monkeyId);
	this.componentType = componentType;
};

MT.CustomType.prototype = new MT.Script;

/**
 * Run the given custom command as: Comp * Action
 */
MT.CustomType.prototype.run = function() {
	var argArray = [].slice.apply(arguments);
	var mods = MT.getModifiers(argArray);

	if (mods.length > 0) {
		argArray.pop();
	}
	var comp = argArray.shift();
	var act = argArray.shift();
	var argList = MT.getArgList(argArray);
	
	var cmd = new Command(comp, '*', act, argList, mods);
	ScopeObj.setCurrentCommand(cmd);

	var result = ProcessorObj.runScript(cmd, ScopeObj);

	if (result == null) {
		return result;
	} else if (result.getStatus() == PlaybackStatus.OK) {
		return "" + result.getMessage();
	} else {
		throw "" + result.getMessage();
	}
};

/**
 * A custom typed for the named type
 * 
 * @param monkeyId
 * @param componentType
 * @returns {MT.CustomCommand}
 */
MT.Application.customType = function(monkeyId, componentType) {
	return new MT.CustomType(app, monkeyId, componentType);
};


//
// CLASS: Device
//
/**
 * The device hosting the application under test.
 * @class
 * @extends MT.MTObject
 * @param app The MT.Application containing this Device
 * @param monkeyId A monkeyId or ordinal
 */
MT.Device = function(app, monkeyId) {
	MT.MTObject.call(this, app, monkeyId);
	this.componentType = "Device";	
};

MT.Device.prototype = new MT.MTObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Device} the upper-left-most visible Device matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.device = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Device(this, monkeyId);
};

//
// METHOD: shake
//
/**
 * Shake the device. iOS: works great. Android: not yet implemented.

 * @returns void 
 */
MT.Device.prototype.shake = function() {
	return this.app.play(this, "shake", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: rotate
//
/**
 * Change the device orientation.
 * @param  {String} direction iOS: 'left' or 'right', Android: 'portrait' or 'landscape'

 * @returns void 
 */
MT.Device.prototype.rotate = function(direction) {
	return this.app.play(this, "rotate", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: back
//
/**
 * Navigate back. iOS: Pops the current UINavigationItem (if there is one). Android: Presses thehardware device key.

 * @returns void 
 */
MT.Device.prototype.back = function() {
	return this.app.play(this, "back", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: forward
//
/**
 * Navigate forward. iOS: Pushes the next UINavigationItem, if there is one. Android: ignored.

 * @returns void 
 */
MT.Device.prototype.forward = function() {
	return this.app.play(this, "forward", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: search
//
/**
 * Press the search key. iOS: ignored. Android: Presses the device search key.

 * @returns void 
 */
MT.Device.prototype.search = function() {
	return this.app.play(this, "search", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: menu
//
/**
 * Press the menu key. iOS: ignored. Android: Presses the device menu key.

 * @returns void 
 */
MT.Device.prototype.menu = function() {
	return this.app.play(this, "menu", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: screenshot
//
/**
 * Take a screenshot of the app under test.

 * @returns void 
 */
MT.Device.prototype.screenshot = function() {
	return this.app.play(this, "screenshot", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: get
//
/**
 * Gets the value of the given property from the component, and set it into the given variablename.
 * @param  {String} variable the name of the variable to set
 * @param  {String} propPath the property name or path expression (defaults to 'value')

 * @returns String 
 */
MT.Device.prototype.get = function(variable, propPath) {
	return this.app.play(this, "get", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: Verifiable
//
/**
 * Base class for all verifiable components.
 * @class
 * @extends MT.MTObject
 * @param app The MT.Application containing this Verifiable
 * @param monkeyId A monkeyId or ordinal
 */
MT.Verifiable = function(app, monkeyId) {
	MT.MTObject.call(this, app, monkeyId);
	this.componentType = "Verifiable";	
};

MT.Verifiable.prototype = new MT.MTObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Verifiable} the upper-left-most visible Verifiable matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.verifiable = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Verifiable(this, monkeyId);
};

//
// METHOD: verify
//
/**
 * Verifies that a property of the component has some expected value.
 * @param  {String} expectedValue the expected value of the property. If null, verifies the existence of the component.
 * @param  {String} propPath the property name or property path expression (defaults to 'value')
 * @param  {String} failMessage the custom failure message

 * @returns void 
 */
MT.Verifiable.prototype.verify = function(expectedValue, propPath, failMessage) {
	return this.app.play(this, "verify", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: verifyNot
//
/**
 * Verifies that a property of the component does not have some value.
 * @param  {String} expectedValue the value the component shouldn't have. If null, verifies the non-existence of the component.
 * @param  {String} propPath the property name or property path expression (defaults to 'value')
 * @param  {String} failMessage the custom failure message

 * @returns void 
 */
MT.Verifiable.prototype.verifyNot = function(expectedValue, propPath, failMessage) {
	return this.app.play(this, "verifyNot", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: verifyRegex
//
/**
 * Verifies that a property of the component matches some regular expression.
 * @param  {String} regex the regular expression to match
 * @param  {String} propPath the property name or property path expression (defaults to 'value')
 * @param  {String} failMessage the custom failure message

 * @returns void 
 */
MT.Verifiable.prototype.verifyRegex = function(regex, propPath, failMessage) {
	return this.app.play(this, "verifyRegex", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: verifyNotRegex
//
/**
 * Verifies that a property of the component does not have a value matching a regularexpression.
 * @param  {String} regex the regular expression that should not match.
 * @param  {String} propPath the property name or property path expression (defaults to 'value')
 * @param  {String} failMessage the custom failure message

 * @returns void 
 */
MT.Verifiable.prototype.verifyNotRegex = function(regex, propPath, failMessage) {
	return this.app.play(this, "verifyNotRegex", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: verifyWildcard
//
/**
 * Verifies that a property of the component matches some wildcard expression.
 * @param  {String} wildcard the wildcard expression to match
 * @param  {String} propPath the property name or property path expression (defaults to 'value')
 * @param  {String} failMessage the custom failure message

 * @returns void 
 */
MT.Verifiable.prototype.verifyWildcard = function(wildcard, propPath, failMessage) {
	return this.app.play(this, "verifyWildcard", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: verifyNotWildcard
//
/**
 * Verifies that a property of the component does not have a value matching some wildcardexpression.
 * @param  {String} wildcard the wildcard expression that should not match
 * @param  {String} propPath the property name or property path expression (defaults to 'value')
 * @param  {String} failMessage the custom failure message

 * @returns void 
 */
MT.Verifiable.prototype.verifyNotWildcard = function(wildcard, propPath, failMessage) {
	return this.app.play(this, "verifyNotWildcard", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: View
//
/**
 * Base class for all UI components. On iOS, monkeyId defaults to the accessibilityLabel. OnAndroid, monkeyId defaults to contentDescription if one exists, otherwise the component's tagvalue if it has a string value.
 * @class
 * @extends MT.Verifiable
 * @param app The MT.Application containing this View
 * @param monkeyId A monkeyId or ordinal
 */
MT.View = function(app, monkeyId) {
	MT.Verifiable.call(this, app, monkeyId);
	this.componentType = "View";	
};

MT.View.prototype = new MT.Verifiable;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.View} the upper-left-most visible View matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.view = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.View(this, monkeyId);
};

//
// METHOD: tap
//
/**
 * Taps on the component. On Android, plays a 'click'. On iOS, plays aTouchDown/TouchMove/TouchUp sequence.

 * @returns void 
 */
MT.View.prototype.tap = function() {
	return this.app.play(this, "tap", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: longPress
//
/**
 * Performs a long press on the component. On Android, plays a 'longClick'. On iOS, plays alongPush gesture.

 * @returns void 
 */
MT.View.prototype.longPress = function() {
	return this.app.play(this, "longPress", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: touchDown
//
/**
 * Start touching the component.
 * @param  {int} x x-coordinate of the touch
 * @param  {int} y y-coordinate of the touch

 * @returns void 
 */
MT.View.prototype.touchDown = function(x, y) {
	return this.app.play(this, "touchDown", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: touchMove
//
/**
 * Drag across the component
 * @param  {int} coords one or more (x,y) coordinate pairs specifying the path of the drag gesture

 * @returns void 
 */
MT.View.prototype.touchMove = function(coords) {
	return this.app.play(this, "touchMove", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: touchUp
//
/**
 * Stop touching the component.
 * @param  {int} x x-coordinate of where touch is released
 * @param  {int} y y-coordinate of where touch is released

 * @returns void 
 */
MT.View.prototype.touchUp = function(x, y) {
	return this.app.play(this, "touchUp", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: pinch
//
/**
 * Pinch the component.
 * @param  {float} scale The scale factor relative to the points of the two touches in screen coordinates
 * @param  {float} velocity The velocity of the pinch in scale factor per second (read-only)

 * @returns void 
 */
MT.View.prototype.pinch = function(scale, velocity) {
	return this.app.play(this, "pinch", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: swipe
//
/**
 * A simple directional swipe across the component.
 * @param  {String} direction Left, Right, Up, or Down (case insensitive)

 * @returns void 
 */
MT.View.prototype.swipe = function(direction) {
	return this.app.play(this, "swipe", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: drag
//
/**
 * Touch down at the first coordinate pair, move from pair to pair for all the givencoordinates, and touch up at the last coordinate pair.
 * @param  {int} coords one or more (x,y) coordinate pairs specifying the path of a drag gesture

 * @returns void 
 */
MT.View.prototype.drag = function(coords) {
	return this.app.play(this, "drag", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: get
//
/**
 * Gets the value of the given property from the component, and set it into the given variablename.
 * @param  {String} variable the name of the variable to set
 * @param  {String} propPath the property name or path expression (defaults to 'value')

 * @returns String 
 */
MT.View.prototype.get = function(variable, propPath) {
	return this.app.play(this, "get", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: DatePicker
//
/**
 * A component that edits a date. iOS: UIDatePicker. Android: DatePicker.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this DatePicker
 * @param monkeyId A monkeyId or ordinal
 */
MT.DatePicker = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "DatePicker";	
};

MT.DatePicker.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.DatePicker} the upper-left-most visible DatePicker matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.datePicker = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.DatePicker(this, monkeyId);
};

//
// METHOD: enterDate
//
/**
 * Enter the date value.
 * @param  {String} date A date with the format YYYY-MM-DD where YYYY is the year, MM is the month (01-12), and DD is the day (01-31).

 * @returns void 
 */
MT.DatePicker.prototype.enterDate = function(date) {
	return this.app.play(this, "enterDate", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: enterTime
//
/**
 * Enter the time value.
 * @param  {String} time A time with the format hh:mm am/pm, where hh is the hour (01-12), mm is the minute (00-59), and am/pm is the marker.

 * @returns void 
 */
MT.DatePicker.prototype.enterTime = function(time) {
	return this.app.play(this, "enterTime", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: enterDateAndTime
//
/**
 * Enter the date and time value.
 * @param  {String} dateAndTime A date and time with the format YYYY-MM-DD hh:mm am/pm, where YYYY is the year, MM is the month (01-12), DD is the day (01-31), hh is the hour (01-12), mm is the minute (00-59), and am/pm is the marker.

 * @returns void 
 */
MT.DatePicker.prototype.enterDateAndTime = function(dateAndTime) {
	return this.app.play(this, "enterDateAndTime", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: enterCountDownTimer
//
/**
 * Enter the count down timer value. (iOS only)
 * @param  {String} timer A timer with the format hh:mm, where hh is the hour (00-23), and mm is the minute (00-59).

 * @returns void 
 */
MT.DatePicker.prototype.enterCountDownTimer = function(timer) {
	return this.app.play(this, "enterCountDownTimer", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: IndexedSelector
//
/**
 * A component that provides for selection of an item from a list of items. Item selection isrecorded and played back with an index indicating the selected item.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this IndexedSelector
 * @param monkeyId A monkeyId or ordinal
 */
MT.IndexedSelector = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "IndexedSelector";	
};

MT.IndexedSelector.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.IndexedSelector} the upper-left-most visible IndexedSelector matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.indexedSelector = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.IndexedSelector(this, monkeyId);
};

//
// METHOD: selectIndex
//
/**
 * Selects an item by index.
 * @param  {int} itemNumber the index of the item to select.

 * @returns void 
 */
MT.IndexedSelector.prototype.selectIndex = function(itemNumber) {
	return this.app.play(this, "selectIndex", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: longSelectIndex
//
/**
 * Long press an item by index.
 * @param  {int} itemNumber the index of the item to long press.

 * @returns void 
 */
MT.IndexedSelector.prototype.longSelectIndex = function(itemNumber) {
	return this.app.play(this, "longSelectIndex", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: ItemSelector
//
/**
 * A component that provides for selecting a text item from a list of items. iOS: UIPickerView. Android: UISpinner. Web: Select tag.
 * @class
 * @extends MT.IndexedSelector
 * @param app The MT.Application containing this ItemSelector
 * @param monkeyId A monkeyId or ordinal
 */
MT.ItemSelector = function(app, monkeyId) {
	MT.IndexedSelector.call(this, app, monkeyId);
	this.componentType = "ItemSelector";	
};

MT.ItemSelector.prototype = new MT.IndexedSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.ItemSelector} the upper-left-most visible ItemSelector matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.itemSelector = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.ItemSelector(this, monkeyId);
};

//
// METHOD: select
//
/**
 * Select an item by value.
 * @param  {String} value the value of the item to select.

 * @returns void 
 */
MT.ItemSelector.prototype.select = function(value) {
	return this.app.play(this, "select", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: Table
//
/**
 * A component that provides a tabular view of data. iOS: UITableView. Android: Table. Web: Table tag. For web tables, the section specifies the column.
 * @class
 * @extends MT.ItemSelector
 * @param app The MT.Application containing this Table
 * @param monkeyId A monkeyId or ordinal
 */
MT.Table = function(app, monkeyId) {
	MT.ItemSelector.call(this, app, monkeyId);
	this.componentType = "Table";	
};

MT.Table.prototype = new MT.ItemSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Table} the upper-left-most visible Table matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.table = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Table(this, monkeyId);
};

//
// METHOD: selectRow
//
/**
 * Select a row.
 * @param  {int} row the row to select
 * @param  {int} section the section containing the row, defaults to section #1. (Ignored on Android)

 * @returns void 
 */
MT.Table.prototype.selectRow = function(row, section) {
	return this.app.play(this, "selectRow", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: selectIndicator
//
/**
 * Select the indicator (the icon on the right). Android: Ignored.
 * @param  {int} row the row to select
 * @param  {int} section the section containing the row, defaults to section #1.

 * @returns void 
 */
MT.Table.prototype.selectIndicator = function(row, section) {
	return this.app.play(this, "selectIndicator", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: scrollToRow
//
/**
 * Scroll to a row by row number.
 * @param  {int} row the row to scroll to
 * @param  {int} section the section containing the row, defaults to section #1. (Ignored on Android)

 * @returns void 
 */
MT.Table.prototype.scrollToRow = function(row, section) {
	return this.app.play(this, "scrollToRow", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: scrollToRow
//
/**
 * Scroll to a row by value.
 * @param  {String} value the value of the row to scroll to.

 * @returns void 
 */
MT.Table.prototype.scrollToRow = function(value) {
	return this.app.play(this, "scrollToRow", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: setEditing
//
/**
 * Enable/disable table editing. iOS: Enabled editing mode for table. Android: ignored.
 * @param  {boolean} enabled if true, enable editing, else disable editing.

 * @returns void 
 */
MT.Table.prototype.setEditing = function(enabled) {
	return this.app.play(this, "setEditing", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: insert
//
/**
 * Insert a row into the table. iOS: Inserts a row. Android: Ignored.
 * @param  {int} row the index of the row after which to insert a new row.
 * @param  {int} section the section containing the row, defaults to section #1.

 * @returns void 
 */
MT.Table.prototype.insert = function(row, section) {
	return this.app.play(this, "insert", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: remove
//
/**
 * Remove a row from the table. iOS: Deletes the row. Android: Ignored.
 * @param  {int} row the index of the row to be removed.
 * @param  {int} section the section containing the row, defaults to section #1.

 * @returns void 
 */
MT.Table.prototype.remove = function(row, section) {
	return this.app.play(this, "remove", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: move
//
/**
 * Move a row. iOS: Moves a row. Android: Ignored.
 * @param  {int} from the index of the row to be moved.
 * @param  {int} to the destination row for the move.

 * @returns void 
 */
MT.Table.prototype.move = function(from, to) {
	return this.app.play(this, "move", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: Label
//
/**
 * A read-only text field. iOS: UILabel. Android: An uneditable TextView.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this Label
 * @param monkeyId A monkeyId or ordinal
 */
MT.Label = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "Label";	
};

MT.Label.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Label} the upper-left-most visible Label matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.label = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Label(this, monkeyId);
};


//
// CLASS: Input
//
/**
 * A single-line input field. iOS: UITextField. Android: single-line editable TextView. Web: Inputtag with type='text'. If the input as a hint/prompt, it is used as the monkeyId.
 * @class
 * @extends MT.Label
 * @param app The MT.Application containing this Input
 * @param monkeyId A monkeyId or ordinal
 */
MT.Input = function(app, monkeyId) {
	MT.Label.call(this, app, monkeyId);
	this.componentType = "Input";	
};

MT.Input.prototype = new MT.Label;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Input} the upper-left-most visible Input matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.input = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Input(this, monkeyId);
};

//
// METHOD: enterText
//
/**
 * Enter text into the input field.
 * @param  {String} text the text to enter
 * @param  {String} hitEnter if 'enter', hit the Enter/Return/Done/Next key after entering the text.

 * @returns void 
 */
MT.Input.prototype.enterText = function(text, hitEnter) {
	return this.app.play(this, "enterText", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: clear
//
/**
 * Clear text from the input field.

 * @returns void 
 */
MT.Input.prototype.clear = function() {
	return this.app.play(this, "clear", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: TextArea
//
/**
 * A multi-line input field. iOS: UITextView. Android: multiline editable TextView.
 * @class
 * @extends MT.Input
 * @param app The MT.Application containing this TextArea
 * @param monkeyId A monkeyId or ordinal
 */
MT.TextArea = function(app, monkeyId) {
	MT.Input.call(this, app, monkeyId);
	this.componentType = "TextArea";	
};

MT.TextArea.prototype = new MT.Input;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.TextArea} the upper-left-most visible TextArea matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.textArea = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.TextArea(this, monkeyId);
};


//
// CLASS: NumericSelector
//
/**
 * A component that provides for selecting a number for a set of numbers.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this NumericSelector
 * @param monkeyId A monkeyId or ordinal
 */
MT.NumericSelector = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "NumericSelector";	
};

MT.NumericSelector.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.NumericSelector} the upper-left-most visible NumericSelector matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.numericSelector = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.NumericSelector(this, monkeyId);
};

//
// METHOD: select
//
/**
 * Select a numeric value
 * @param  {float} value the value to select

 * @returns void 
 */
MT.NumericSelector.prototype.select = function(value) {
	return this.app.play(this, "select", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: Slider
//
/**
 * A Slider control. iOS: UISlider. Android: SeekBar.
 * @class
 * @extends MT.NumericSelector
 * @param app The MT.Application containing this Slider
 * @param monkeyId A monkeyId or ordinal
 */
MT.Slider = function(app, monkeyId) {
	MT.NumericSelector.call(this, app, monkeyId);
	this.componentType = "Slider";	
};

MT.Slider.prototype = new MT.NumericSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Slider} the upper-left-most visible Slider matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.slider = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Slider(this, monkeyId);
};


//
// CLASS: Stepper
//
/**
 * A stepper control. iOS: UIStepper. Android: ignored.
 * @class
 * @extends MT.NumericSelector
 * @param app The MT.Application containing this Stepper
 * @param monkeyId A monkeyId or ordinal
 */
MT.Stepper = function(app, monkeyId) {
	MT.NumericSelector.call(this, app, monkeyId);
	this.componentType = "Stepper";	
};

MT.Stepper.prototype = new MT.NumericSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Stepper} the upper-left-most visible Stepper matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.stepper = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Stepper(this, monkeyId);
};

//
// METHOD: increment
//
/**
 * Increase the value by the stepsize. Ignored if at max.

 * @returns void 
 */
MT.Stepper.prototype.increment = function() {
	return this.app.play(this, "increment", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: decrement
//
/**
 * Decrease the value by the stepsize. Ignore if at min.

 * @returns void 
 */
MT.Stepper.prototype.decrement = function() {
	return this.app.play(this, "decrement", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: Menu
//
/**
 * A menu UI component. iOS: TabBar. Android: Menu
 * @class
 * @extends MT.ItemSelector
 * @param app The MT.Application containing this Menu
 * @param monkeyId A monkeyId or ordinal
 */
MT.Menu = function(app, monkeyId) {
	MT.ItemSelector.call(this, app, monkeyId);
	this.componentType = "Menu";	
};

MT.Menu.prototype = new MT.ItemSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Menu} the upper-left-most visible Menu matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.menu = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Menu(this, monkeyId);
};


//
// CLASS: Browser
//
/**
 * The browser hosting the webapp under test.
 * @class
 * @extends MT.MTObject
 * @param app The MT.Application containing this Browser
 * @param monkeyId A monkeyId or ordinal
 */
MT.Browser = function(app, monkeyId) {
	MT.MTObject.call(this, app, monkeyId);
	this.componentType = "Browser";	
};

MT.Browser.prototype = new MT.MTObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Browser} the upper-left-most visible Browser matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.browser = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Browser(this, monkeyId);
};

//
// METHOD: open
//
/**
 * Open the given url.
 * @param  {String} url the url to be opened

 * @returns void 
 */
MT.Browser.prototype.open = function(url) {
	return this.app.play(this, "open", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: back
//
/**
 * Navigate the browser back to the previous page. Ignored if this is the first page.

 * @returns void 
 */
MT.Browser.prototype.back = function() {
	return this.app.play(this, "back", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: forward
//
/**
 * Navigate the browser forward to the next page. Ignored if this is the last page.

 * @returns void 
 */
MT.Browser.prototype.forward = function() {
	return this.app.play(this, "forward", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: Button
//
/**
 * A Button. iOS: UIButton. Android: Button. Web: Button tag, or Input tag with type='submit' or type='reset'. Ifthe button has a label, it is used as the monkeyId.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this Button
 * @param monkeyId A monkeyId or ordinal
 */
MT.Button = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "Button";	
};

MT.Button.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Button} the upper-left-most visible Button matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.button = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Button(this, monkeyId);
};


//
// CLASS: Image
//
/**
 * An image. iOS: UIImage, Android: ImageView.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this Image
 * @param monkeyId A monkeyId or ordinal
 */
MT.Image = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "Image";	
};

MT.Image.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Image} the upper-left-most visible Image matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.image = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Image(this, monkeyId);
};


//
// CLASS: CheckBox
//
/**
 * A component that can be checked or unchecked. iOS: ignored. Android: CheckBox.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this CheckBox
 * @param monkeyId A monkeyId or ordinal
 */
MT.CheckBox = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "CheckBox";	
};

MT.CheckBox.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.CheckBox} the upper-left-most visible CheckBox matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.checkBox = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.CheckBox(this, monkeyId);
};

//
// METHOD: on
//
/**
 * Check the checkbox.

 * @returns void 
 */
MT.CheckBox.prototype.on = function() {
	return this.app.play(this, "on", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: off
//
/**
 * Uncheck the checkbox.

 * @returns void 
 */
MT.CheckBox.prototype.off = function() {
	return this.app.play(this, "off", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: System
//
/**
 * The system running the tests (aka the runner).
 * @class
 * @extends MT.MTObject
 * @param app The MT.Application containing this System
 * @param monkeyId A monkeyId or ordinal
 */
MT.System = function(app, monkeyId) {
	MT.MTObject.call(this, app, monkeyId);
	this.componentType = "System";	
};

MT.System.prototype = new MT.MTObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.System} the upper-left-most visible System matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.system = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.System(this, monkeyId);
};

//
// METHOD: exec
//
/**
 * Execute the given command on the system. The system is the computer running the tests, not tobe confused with the app under test that runs in the simulator/emulator or on the device.
 * @param  {String} command the system command to execute

 * @returns void 
 */
MT.System.prototype.exec = function(command) {
	return this.app.play(this, "exec", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: execAndReturn
//
/**
 * Execute the given command on the system. The output from the command is set into the givenvariable name.
 * @param  {String} variable the name of the variable to set
 * @param  {String} command the system command to execute the method to call

 * @returns String 
 */
MT.System.prototype.execAndReturn = function(variable, command) {
	return this.app.play(this, "execAndReturn", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: VideoPlayer
//
/**
 * A component that displays videos. iOS: MPMoviePlayerController. Android: VideoView.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this VideoPlayer
 * @param monkeyId A monkeyId or ordinal
 */
MT.VideoPlayer = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "VideoPlayer";	
};

MT.VideoPlayer.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.VideoPlayer} the upper-left-most visible VideoPlayer matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.videoPlayer = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.VideoPlayer(this, monkeyId);
};

//
// METHOD: play
//
/**
 * Play the video from the current playback point.

 * @returns void 
 */
MT.VideoPlayer.prototype.play = function() {
	return this.app.play(this, "play", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: pause
//
/**
 * Stop the video at the current playback point.

 * @returns void 
 */
MT.VideoPlayer.prototype.pause = function() {
	return this.app.play(this, "pause", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: stop
//
/**
 * Stop the video and set playback to the starting point.

 * @returns void 
 */
MT.VideoPlayer.prototype.stop = function() {
	return this.app.play(this, "stop", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: ButtonSelector
//
/**
 * A group of radio (mutually exclusive) buttons. iOS: UISegmentedControl. Android: RadioGroup. Web:A set of Input tags with type='radio' and name='group'.
 * @class
 * @extends MT.ItemSelector
 * @param app The MT.Application containing this ButtonSelector
 * @param monkeyId A monkeyId or ordinal
 */
MT.ButtonSelector = function(app, monkeyId) {
	MT.ItemSelector.call(this, app, monkeyId);
	this.componentType = "ButtonSelector";	
};

MT.ButtonSelector.prototype = new MT.ItemSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.ButtonSelector} the upper-left-most visible ButtonSelector matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.buttonSelector = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.ButtonSelector(this, monkeyId);
};


//
// CLASS: ToolBar
//
/**
 * A group of tool buttons. iOS: UIToolBar. Android: ActionBar.
 * @class
 * @extends MT.IndexedSelector
 * @param app The MT.Application containing this ToolBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.ToolBar = function(app, monkeyId) {
	MT.IndexedSelector.call(this, app, monkeyId);
	this.componentType = "ToolBar";	
};

MT.ToolBar.prototype = new MT.IndexedSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.ToolBar} the upper-left-most visible ToolBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.toolBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.ToolBar(this, monkeyId);
};


//
// CLASS: Scroller
//
/**
 * A component that provides a scrollable view of its contents. iOS: UIScrollView. Android:Scroller.
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this Scroller
 * @param monkeyId A monkeyId or ordinal
 */
MT.Scroller = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "Scroller";	
};

MT.Scroller.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Scroller} the upper-left-most visible Scroller matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.scroller = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Scroller(this, monkeyId);
};

//
// METHOD: scroll
//
/**
 * Scroll to the specified coordinates.
 * @param  {int} x the x-coordinate (horizontal)
 * @param  {int} y the y-coordinate (vertical)

 * @returns void 
 */
MT.Scroller.prototype.scroll = function(x, y) {
	return this.app.play(this, "scroll", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: RadioButtons
//
/**
 * A RadioButton group. An alias for ButtonSelector.
 * @class
 * @extends MT.ButtonSelector
 * @param app The MT.Application containing this RadioButtons
 * @param monkeyId A monkeyId or ordinal
 */
MT.RadioButtons = function(app, monkeyId) {
	MT.ButtonSelector.call(this, app, monkeyId);
	this.componentType = "RadioButtons";	
};

MT.RadioButtons.prototype = new MT.ButtonSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.RadioButtons} the upper-left-most visible RadioButtons matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.radioButtons = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.RadioButtons(this, monkeyId);
};


//
// CLASS: Debug
//
/**
 * Logging and diagnostics.
 * @class
 * @extends MT.MTObject
 * @param app The MT.Application containing this Debug
 * @param monkeyId A monkeyId or ordinal
 */
MT.Debug = function(app, monkeyId) {
	MT.MTObject.call(this, app, monkeyId);
	this.componentType = "Debug";	
};

MT.Debug.prototype = new MT.MTObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Debug} the upper-left-most visible Debug matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.debug = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Debug(this, monkeyId);
};

//
// METHOD: vars
//
/**
 * Print all variables (and their values) that are currently in the local scope.

 * @returns void 
 */
MT.Debug.prototype.vars = function() {
	return this.app.play(this, "vars", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: print
//
/**
 * Print the given message. Use this to add debugging messages to script output.
 * @param  {String} message the message to be printed

 * @returns void 
 */
MT.Debug.prototype.print = function(message) {
	return this.app.play(this, "print", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: TabBar
//
/**
 * A TabBar. iOS: UITabBar. Android: TabHost. On Android, tabs are selected by 'tag'.
 * @class
 * @extends MT.ItemSelector
 * @param app The MT.Application containing this TabBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.TabBar = function(app, monkeyId) {
	MT.ItemSelector.call(this, app, monkeyId);
	this.componentType = "TabBar";	
};

MT.TabBar.prototype = new MT.ItemSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.TabBar} the upper-left-most visible TabBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.tabBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.TabBar(this, monkeyId);
};


//
// CLASS: Link
//
/**
 * A web hypertext link.
 * @class
 * @extends MT.Label
 * @param app The MT.Application containing this Link
 * @param monkeyId A monkeyId or ordinal
 */
MT.Link = function(app, monkeyId) {
	MT.Label.call(this, app, monkeyId);
	this.componentType = "Link";	
};

MT.Link.prototype = new MT.Label;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Link} the upper-left-most visible Link matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.link = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Link(this, monkeyId);
};


//
// CLASS: App
//
/**
 * The application under test.
 * @class
 * @extends MT.MTObject
 * @param app The MT.Application containing this App
 * @param monkeyId A monkeyId or ordinal
 */
MT.App = function(app, monkeyId) {
	MT.MTObject.call(this, app, monkeyId);
	this.componentType = "App";	
};

MT.App.prototype = new MT.MTObject;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.App} the upper-left-most visible App matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.app = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.App(this, monkeyId);
};

//
// METHOD: exec
//
/**
 * Execute a method on a native class. The method must take zero or more String arguments. Theclass is given in the monkeyId by its fully qualified class name.
 * @param  {String} method the method to call
 * @param  {String} args the String args to be supplied to the method

 * @returns void 
 */
MT.App.prototype.exec = function(method, args) {
	return this.app.play(this, "exec", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: execAndReturn
//
/**
 * Execute a method on a native class. The method must take zero or more String arguments andreturn a String result. The returned value is set into the given variable name. The class isgiven in the monkeyId by its fully qualified class name.
 * @param  {String} variable the name of the variable to set
 * @param  {String} method the method to call
 * @param  {String} args the String args to be supplied to the method

 * @returns String 
 */
MT.App.prototype.execAndReturn = function(variable, method, args) {
	return this.app.play(this, "execAndReturn", MT.getArgList(arguments), MT.getModifiers(arguments));
};


//
// CLASS: RatingBar
//
/**
 * A component that captures a rating (eg, with stars). iOS: Slider. Android: RatingBar.
 * @class
 * @extends MT.NumericSelector
 * @param app The MT.Application containing this RatingBar
 * @param monkeyId A monkeyId or ordinal
 */
MT.RatingBar = function(app, monkeyId) {
	MT.NumericSelector.call(this, app, monkeyId);
	this.componentType = "RatingBar";	
};

MT.RatingBar.prototype = new MT.NumericSelector;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.RatingBar} the upper-left-most visible RatingBar matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.ratingBar = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.RatingBar(this, monkeyId);
};


//
// CLASS: Toggle
//
/**
 * An On/Off switch. iOS: UISwitch. Android: ToggleButton
 * @class
 * @extends MT.View
 * @param app The MT.Application containing this Toggle
 * @param monkeyId A monkeyId or ordinal
 */
MT.Toggle = function(app, monkeyId) {
	MT.View.call(this, app, monkeyId);
	this.componentType = "Toggle";	
};

MT.Toggle.prototype = new MT.View;

/**
 * 
 * @param monkeyId the monkeyId (String) or ordinal (int) for which to search. 
 * @returns {MT.Toggle} the upper-left-most visible Toggle matching the supplied monkeyId or ordinal
 */
MT.Application.prototype.toggle = function(monkeyId) {
	if (!monkeyId) {
		monkeyId = "";
	}
	return new MT.Toggle(this, monkeyId);
};

//
// METHOD: on
//
/**
 * Toggle the button on.

 * @returns void 
 */
MT.Toggle.prototype.on = function() {
	return this.app.play(this, "on", MT.getArgList(arguments), MT.getModifiers(arguments));
};

//
// METHOD: off
//
/**
 * Toggle the button off.

 * @returns void 
 */
MT.Toggle.prototype.off = function() {
	return this.app.play(this, "off", MT.getArgList(arguments), MT.getModifiers(arguments));
};




